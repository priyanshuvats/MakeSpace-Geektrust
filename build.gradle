/*

* This file was generated by the Gradle 'init' task.

*

* This generated file contains a sample Java application project to get you started.

* For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle

* User Manual available at https://docs.gradle.org/7.1/userguide/building_java_projects.html

*/


plugins {

   // Apply the application plugin to add support for building a CLI application in Java.
   id 'java'
   id 'jacoco'

}

group = 'com.example.geektrust'
version = '1.0'
sourceCompatibility = 1.8
targetCompatibility = 1.8

jacoco { //Please do not change this
    toolVersion = "0.8.4"
    reportsDir = file("$buildDir/jacoco")
}

jacocoTestReport { //Please do not change this
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled false
        xml.destination file("./jacoco.xml")
    }
}

jar {
    archiveBaseName = 'geektrust' //Please do not change this final artifact name
    version =  null               //Please do not change this final artifact version
    manifest {
        attributes 'Main-Class' : 'com.example.geektrust.App' //Change this to the main class of your program which will be executed
    }
    // To create a single jar with all dependencies.
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
}

test { ///Please do not change this
    useJUnitPlatform()
    testLogging {
        events "PASSED", "SKIPPED", "FAILED", "STANDARD_ERROR"
    }
    finalizedBy jacocoTestReport // report is always generated after tests run
    afterSuite { desc, result ->
        if (!desc.parent)
            println("${result.resultType} " +
                "(${result.testCount} tests, " +
                "${result.successfulTestCount} successes, " +
                "${result.failedTestCount} failures, " +
                "${result.skippedTestCount} skipped)")
        }
}

repositories {

   // Use Maven Central for resolving dependencies.

   mavenCentral()

}


dependencies {

   // Use JUnit Jupiter for testing.

   //testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'

   //testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.2'

   testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version:'5.8.2'
   testCompile group: 'org.mockito', name: 'mockito-core', version:'4.1.0'
   testCompile group: 'org.mockito', name: 'mockito-junit-jupiter', version:'4.1.0'

   //testImplementation 'org.mockito:mockito-core:2.16.0'

   //testImplementation 'org.mockito:mockito-junit-jupiter:3.11.2'


}


